<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法与数据结构 on 裕用 Wiki</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/</link><description>Recent content in 算法与数据结构 on 裕用 Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yuyongid.github.io/myWiki/docs/arithmetic/index.xml" rel="self" type="application/rss+xml"/><item><title>高频题目</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/leetcoderanking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/leetcoderanking/</guid><description>LeetCode 的高频题目 # DFS：深度优先搜索算法（Depth First Search），对于二叉树而言，它沿着树的深度遍历树的节点，尽可能深的搜索树的分支，这一过程一直进行到已发现从源节点可达的所有节点为止。
平衡二叉树： 左右子树的高度相差不超过 1 的树为平衡二叉树
插入方式 描述 旋转方式 LL 在 A 的左子树根节点的左子树上插入节点而破坏平衡 右旋转 RR 在 A 的右子树根节点的右子树上插入节点而破坏平衡 左旋转 LR 在A的左子树根节点的右子树上插入节点而破坏平衡 先左旋后右旋 RL 在 A 的右子树根节点的左子树上插入节点而破坏平衡 先右旋后左旋 XOR 异或运算 ⊕ # 任何数和 0 做异或运算，结果仍然是原来的数，即 a⊕0=a。 任何数和其自身做异或运算，结果是 0，即 a⊕a=0。 异或运算满足交换律和结合律，即 a⊕b⊕a=b⊕a⊕a=b⊕(a⊕a)=b⊕0=b。 汉明距离 # 两个整数之间的汉明距离是对应位置上数字不同的位数。XOR 的位运算，当且仅当输入位不同时输出为 1。</description></item></channel></rss>