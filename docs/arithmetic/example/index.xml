<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>栗子🌰 on 裕用 Wiki</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/</link><description>Recent content in 栗子🌰 on 裕用 Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yuyongid.github.io/myWiki/docs/arithmetic/example/index.xml" rel="self" type="application/rss+xml"/><item><title>二分查找 binary search</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/binarysearch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/binarysearch/</guid><description>二分查找 binary search # 二分查找 ... func search(nums []int, target int) int { left, right := 0, len(nums)-1 for left &amp;lt;= right { mid := left + (right-left)/2 if nums[mid] == target { return mid } if nums[mid] &amp;gt; target { right = mid - 1 continue } left = mid + 1 } return -1 }</description></item><item><title>二叉树 binary tree</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/binarytree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/binarytree/</guid><description>二叉树 binary tree # 反转二叉树 ... /** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ func invertTree(root *TreeNode) *TreeNode { if root == nil { return nil } root.Right, root.Left = invertTree(root.Left), invertTree(root.Right) return root } 二叉树的最大深度 ... /** * Definition for a binary tree node.</description></item><item><title>位运算 bit operation</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/bitoperation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/bitoperation/</guid><description>位运算 bit operation # IP 到 CIDR ... #!/usr/bin/env python # -*- coding: utf-8 -*- def ipToCIDR(ip, range): &amp;#34;&amp;#34;&amp;#34; :type ip: str :type range: int :rtype: List[str] &amp;#34;&amp;#34;&amp;#34; ipInt = ipToInt(ip) ans = [] x = 0 while x &amp;lt; range: zeros = countZeros(ipInt + x) while x + (1&amp;lt;&amp;lt;zeros) &amp;gt; range: zeros -= 1 ans.append(intToIp(ipInt + x) + &amp;#34;/&amp;#34; + str(32 - zeros)) x += 1&amp;lt;&amp;lt;zeros return ans def ipToInt(ip): ans = 0 for idx, part in enumerate(ip.</description></item><item><title>哈希表 hash map</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/hashmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/hashmap/</guid><description>哈希表 hash map # 宝石与石头 ... func numJewelsInStones(J string, S string) int { jewels := make(map[string]struct{}) result := 0 for i:=0;i&amp;lt;len(J);i++{ jewels[string(J[i])] = struct{}{} } for i:=0;i&amp;lt;len(S);i++{ if _, ok := jewels[string(S[i])];ok { result = result + 1 } } return result } 岛屿的周长 ... // 强行遍历所有节点的四周，判断四周格子的类型来计算是否周长+1 func islandPerimeter(grid [][]int) int { perimeter := 0 for i:=0;i&amp;lt;len(grid);i++{ sum := 0 for j:=0;j&amp;lt;len(grid[0]);j++{ if grid[i][j] == 0{ continue } if j-1&amp;lt;0 || grid[i][j-1] == 0 {sum++} if i-1&amp;lt;0 || grid[i-1][j] == 0 {sum++} if j+1&amp;gt;=len(grid[0]) || grid[i][j+1] == 0 {sum++} if i+1&amp;gt;=len(grid) || grid[i+1][j] == 0 {sum++} } perimeter = perimeter + sum } return perimeter } // DFS 递归遍历岛屿的格子，通过判断是否下一次进入的格子的类型和是否已经遍历过，来返回计入周长的边长是1还是0 func islandPerimeter(grid [][]int) int { for r:=0;r&amp;lt;len(grid);r++{ for c:=0;c&amp;lt;len(grid[0]);c++{ if grid[r][c] == 1 { return dfs(grid, r, c) } } } return 0 } func dfs(grid [][]int, r int, c int) int { if !</description></item><item><title>字符串 string</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/string/</guid><description>字符串 string # 罗马数字转整数 ... 直接使用 hash map 作为索引会比较省事
func romanToInt(s string) int { tranMap := map[string]int { &amp;#34;I&amp;#34;: 1, &amp;#34;V&amp;#34;: 5, &amp;#34;X&amp;#34;: 10, &amp;#34;L&amp;#34;: 50, &amp;#34;C&amp;#34;: 100, &amp;#34;D&amp;#34;: 500, &amp;#34;M&amp;#34;: 1000, &amp;#34;IV&amp;#34;: 4, &amp;#34;IX&amp;#34;: 9, &amp;#34;XL&amp;#34;: 40, &amp;#34;XC&amp;#34;: 90, &amp;#34;CD&amp;#34;: 400, &amp;#34;CM&amp;#34;: 900, } sList := strings.Split(s, &amp;#34;&amp;#34;) result := 0 for i:=0;i&amp;lt;len(sList);i++ { if i == len(sList) -1 { result = result + tranMap[sList[i]] continue } if v, ok := tranMap[sList[i]+sList[i+1]];ok{ result = result + v i = i + 1 continue } result = result + tranMap[sList[i]] } return result } 有效的括号 .</description></item><item><title>数学 mathematics</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/mathematics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/mathematics/</guid><description>数学 mathematics # 整数反转 ... func reverse(x int) int { y := 0 for x != 0 { y = y*10 + x%10 x = x/10 } if y &amp;lt; -(1&amp;lt;&amp;lt;31) || y &amp;gt; (1&amp;lt;&amp;lt;31)-1 { return 0 } return y }</description></item><item><title>数组 array</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/array/</guid><description>数组 array # 两数之和 ... func twoSum(nums []int, target int) []int { result := map[int]int{} for i:=0;i&amp;lt;len(nums);i++{ if k, exist := result[target-nums[i]];exist { return []int{k, i} } result[nums[i]] = i } return nil } 合并两个有序数组 ... 合并有序数列，不一定从小到大合并，也可以从大到小合并； 第一个数组有空间余量，直接操作比创建新变量空间合适； func merge(nums1 []int, m int, nums2 []int, n int) { p1 := m-1 p2 := n-1 p3 := m+n-1 for ;p1&amp;gt;=0&amp;amp;&amp;amp;p2&amp;gt;=0;p3--{ if nums1[p1] &amp;lt; nums2[p2] { nums1[p3] = nums2[p2] p2 = p2-1 continue } nums1[p3] = nums1[p1] p1 = p1-1 } for i:=0;i&amp;lt;p2+1;i++{ nums1[i] = nums2[i] } return nums1 } 两数之和 II - 输入有序数组 .</description></item><item><title>链表 linked list</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/linkedlist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/linkedlist/</guid><description>链表 linked list # 合并两个有序列表 ... /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { result := &amp;amp;ListNode{} preHead := result for (l1 != nil &amp;amp;&amp;amp; l2 != nil){ if l1.Val &amp;lt; l2.Val { preHead.Next = l1 l1 = l1.Next } else { preHead.Next = l2 l2 = l2.Next } preHead = preHead.</description></item></channel></rss>