<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on 裕用 Wiki</title><link>https://yuyongid.github.io/myWiki/docs/</link><description>Recent content in Docs on 裕用 Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yuyongid.github.io/myWiki/docs/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yuyongid.github.io/myWiki/docs/linux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/linux/</guid><description>linux系统中的Load： 是对当前CPU工作量的度量 (WikiPedia: the system load is a measure of the amount of work that a computer system is doing)。也有简单的说是进程队列的长度。
什么样的Load average值要提高警惕 # 0.7 &amp;lt; load &amp;lt; 1: 此时是不错的状态，如果进来更多的汽车，你的马路仍然可以应付。 load = 1: 你的马路即将拥堵，而且没有更多的资源额外的任务，赶紧看看发生了什么吧。 load &amp;gt; 5: 非常严重拥堵，我们的马路非常繁忙，每辆车都无法很快的运行 性能指标 # 业务性能指标可以直观地反映被测系统的实际性能状况，常用的指标项有：
并发用户数 事务吞吐率（TPS/RPS） 事务平均响应时间 事务成功率 而系统资源性能指标，主要是反映整个系统环境的硬件资源使用情况，常用的指标包括：
服务器：CPU利用率、处理器队列长度、内存利用率、内存交换页面数、磁盘IO状态、网卡带宽使用情况等； 数据库：数据库连接数、数据库读写响应时长、数据库读写吞吐量等； 网络：网络吞吐量、网络带宽、网络缓冲池大小； 缓存（Redis）：静态资源缓存命中率、动态数据缓存命中率、缓存吞吐量等； 测试设备（压力发生器）：CPU利用率、处理器队列长度、内存利用率、内存交换页面数、磁盘IO状态、网卡带宽使用情况等。</description></item><item><title/><link>https://yuyongid.github.io/myWiki/docs/qa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/qa/</guid><description>Python垃圾回收机制 # Python GC主要使用引用计数（reference counting）来跟踪和回收垃圾。在引用计数的基础上，通过“标记-清除”（mark and sweep）解决容器对象可能产生的循环引用问题，通过“分代回收”（generation collection）以空间换时间的方法提高垃圾回收效率。
1 引用计数 # PyObject是每个对象必有的内容，其中ob_refcnt就是做为引用计数。当一个对象有新的引用时，它的ob_refcnt就会增加，当引用它的对象被删除，它的ob_refcnt就会减少.引用计数为0时，该对象生命就结束了。
优点:
简单 实时性 缺点:
维护引用计数消耗资源 循环引用 2 标记-清除机制 # 基本思路是先按需分配，等到没有空闲内存的时候从寄存器和程序栈上的引用出发，遍历以对象为节点、以引用为边构成的图，把所有可以访问到的对象打上标记，然后清扫一遍内存空间，把所有没标记的对象释放。
3 分代技术 # 分代回收的整体思想是：将系统中的所有内存块根据其存活时间划分为不同的集合，每个集合就成为一个“代”，垃圾收集频率随着“代”的存活时间的增大而减小，存活时间通常利用经过几次垃圾回收来度量。
Python默认定义了三代对象集合，索引数越大，对象存活时间越长。
reids 数据类型 # 数据类型 最大存储 特性 应用场景 string 512MB 可以包含任何数据,比如jpg图片或者序列化的对象,一个键最大能存储512M 常规key-value缓存应用。常规计数: 微博数, 粉丝数。 hash 每个 hash 可以存储 2^32 -1 键值对（40多亿） 适合存储对象,并且可以像数据库中update一个属性一样只修改某一项属性值(Memcached中需要取出整个字符串反序列化成对象修改完再序列化存回去) 存储、读取、修改用户属性。用户对象包含姓名，年龄，生日等信息 list 列表最多可存储 2^32 - 1 元素（40多亿） 增删快,提供了操作某一段元素的API 1、最新消息排行等功能(比如朋友圈的时间线) 2、消息队列 set 集合中最大的成员数为 232 - 1 1、添加、删除、查找的复杂度都是O(1) 2、为集合提供了求交集、并集、差集等操作 1、共同好友 2、利用唯一性,统计访问网站的所有独立ip 3、好友推荐时,根据tag求交集,大于某个阈值就可以推荐 zset 数据插入集合时,已经进行天然排序 1、排行榜 2、带权重的消息队列 压测 # 线下环境压测的意义 # 缩比的压力测试环境压测出来的数据，完全不能用做生产环境的参考。但是这样的测试环境在研发阶段有其重要价值：</description></item><item><title/><link>https://yuyongid.github.io/myWiki/docs/shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/shell/</guid><description>Shell 记录 # 计算用命令列表 # 命令 意义 sort -k1 -nr sort 排列计算，不带参数会将元素归类；-k1 以第一列为关键词；-nr的n代表关键词是 number 数字，r 代表 reverse 倒叙输出。 uniq -c uniq 省略重复行。-c代表计数 date +%d/%b/%Y:%H:%M Nginx 日志日期格式的 data，date -d '-1 minute' +%d/%b/%Y:%H:%M当前时间的前一分钟 AWK 需要记录的内建变量 # 变量名 意义 $0 整行的内容 NR 从1开始的行数 OFS 输出字段分隔符，OFS=&amp;quot;\t&amp;quot;输出用制表符来分列 NF 当前记录中的字段个数，就是有多少列。$NF 最后一列数据 AWK 正则与 grep 的对比 # # 下面操作相等 grep &amp;#34;TIME_WAIT&amp;#34; netstat.</description></item></channel></rss>