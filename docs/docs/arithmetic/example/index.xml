<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>栗子🌰 on 裕用 Wiki</title>
    <link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/</link>
    <description>Recent content in 栗子🌰 on 裕用 Wiki</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://yuyongid.github.io/myWiki/docs/arithmetic/example/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>位运算 bit operation</title>
      <link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/bitoperation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/bitoperation/</guid>
      <description>位运算 bit operation #   IP 到 CIDR ...  #!/usr/bin/env python # -*- coding: utf-8 -*- def ipToCIDR(ip, range): &amp;#34;&amp;#34;&amp;#34; :type ip: str :type range: int :rtype: List[str] &amp;#34;&amp;#34;&amp;#34; ipInt = ipToInt(ip) ans = [] x = 0 while x &amp;lt; range: zeros = countZeros(ipInt + x) while x + (1&amp;lt;&amp;lt;zeros) &amp;gt; range: zeros -= 1 ans.append(intToIp(ipInt + x) + &amp;#34;/&amp;#34; + str(32 - zeros)) x += 1&amp;lt;&amp;lt;zeros return ans def ipToInt(ip): ans = 0 for idx, part in enumerate(ip.</description>
    </item>
    
    <item>
      <title>链表 linked list</title>
      <link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/linkedlist/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/linkedlist/</guid>
      <description>链表 linked list #   合并两个有序列表 ...  /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { result := &amp;amp;ListNode{} preHead := result for (l1 != nil &amp;amp;&amp;amp; l2 != nil){ if l1.Val &amp;lt; l2.Val { preHead.Next = l1 l1 = l1.Next } else { preHead.Next = l2 l2 = l2.Next } preHead = preHead.</description>
    </item>
    
  </channel>
</rss>