<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>裕用 Wiki</title><link>https://yuyongid.github.io/myWiki/</link><description>Recent content on 裕用 Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://yuyongid.github.io/myWiki/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://yuyongid.github.io/myWiki/docs/docker/docker-learn/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/docker/docker-learn/</guid><description>docker learn test #</description></item><item><title/><link>https://yuyongid.github.io/myWiki/docs/shell/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/shell/</guid><description>Shell 记录 # 计算用命令列表 # 命令 意义 sort -k1 -nr sort 排列计算，不带参数会将元素归类；-k1 以第一列为关键词；-nr的n代表关键词是 number 数字，r 代表 reverse 倒叙输出。 uniq -c uniq 省略重复行。-c代表计数 date +%d/%b/%Y:%H:%M Nginx 日志日期格式的 data，date -d '-1 minute' +%d/%b/%Y:%H:%M当前时间的前一分钟 AWK 需要记录的内建变量 # 变量名 意义 $0 整行的内容 NR 从1开始的行数 OFS 输出字段分隔符，OFS=&amp;quot;\t&amp;quot;输出用制表符来分列 NF 当前记录中的字段个数，就是有多少列。$NF 最后一列数据 AWK 正则与 grep 的对比 # # 下面操作相等 grep &amp;#34;TIME_WAIT&amp;#34; netstat.</description></item><item><title>go 语言一些笔记</title><link>https://yuyongid.github.io/myWiki/docs/go-language/go-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/go-language/go-notes/</guid><description>一些笔记 # 1&amp;lt;&amp;lt;31 // 2的31次方 map 的空值 # a := make(map[int]bool) fmt.Println(a[0]) // false b := make(map[int]int) fmt.Println(b[0]) // 0 c := make(map[int]string) fmt.Println(c[0]) // &amp;#34;&amp;#34; 空字符串</description></item><item><title>二叉树 binary tree</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/binarytree/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/binarytree/</guid><description>二叉树 binary tree # 反转二叉树 ... /** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ func invertTree(root *TreeNode) *TreeNode { if root == nil { return nil } root.Right, root.Left = invertTree(root.Left), invertTree(root.Right) return root } 二叉树的最大深度 ... /** * Definition for a binary tree node.</description></item><item><title>位运算 bit operation</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/bitoperation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/bitoperation/</guid><description>位运算 bit operation # IP 到 CIDR ... #!/usr/bin/env python # -*- coding: utf-8 -*- def ipToCIDR(ip, range): &amp;#34;&amp;#34;&amp;#34; :type ip: str :type range: int :rtype: List[str] &amp;#34;&amp;#34;&amp;#34; ipInt = ipToInt(ip) ans = [] x = 0 while x &amp;lt; range: zeros = countZeros(ipInt + x) while x + (1&amp;lt;&amp;lt;zeros) &amp;gt; range: zeros -= 1 ans.append(intToIp(ipInt + x) + &amp;#34;/&amp;#34; + str(32 - zeros)) x += 1&amp;lt;&amp;lt;zeros return ans def ipToInt(ip): ans = 0 for idx, part in enumerate(ip.</description></item><item><title>哈希表 hash map</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/hashmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/hashmap/</guid><description>哈希表 hash map # 宝石与石头 ... func numJewelsInStones(J string, S string) int { jewels := make(map[string]struct{}) result := 0 for i:=0;i&amp;lt;len(J);i++{ jewels[string(J[i])] = struct{}{} } for i:=0;i&amp;lt;len(S);i++{ if _, ok := jewels[string(S[i])];ok { result = result + 1 } } return result } 岛屿的周长 ... // 强行遍历所有节点的四周，判断四周格子的类型来计算是否周长+1 func islandPerimeter(grid [][]int) int { perimeter := 0 for i:=0;i&amp;lt;len(grid);i++{ sum := 0 for j:=0;j&amp;lt;len(grid[0]);j++{ if grid[i][j] == 0{ continue } if j-1&amp;lt;0 || grid[i][j-1] == 0 {sum++} if i-1&amp;lt;0 || grid[i-1][j] == 0 {sum++} if j+1&amp;gt;=len(grid[0]) || grid[i][j+1] == 0 {sum++} if i+1&amp;gt;=len(grid) || grid[i+1][j] == 0 {sum++} } perimeter = perimeter + sum } return perimeter } // DFS 递归遍历岛屿的格子，通过判断是否下一次进入的格子的类型和是否已经遍历过，来返回计入周长的边长是1还是0 func islandPerimeter(grid [][]int) int { for r:=0;r&amp;lt;len(grid);r++{ for c:=0;c&amp;lt;len(grid[0]);c++{ if grid[r][c] == 1 { return dfs(grid, r, c) } } } return 0 } func dfs(grid [][]int, r int, c int) int { if !</description></item><item><title>字符串 string</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/string/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/string/</guid><description>字符串 string # 罗马数字转整数 ... 直接使用 hash map 作为索引会比较省事
func romanToInt(s string) int { tranMap := map[string]int { &amp;#34;I&amp;#34;: 1, &amp;#34;V&amp;#34;: 5, &amp;#34;X&amp;#34;: 10, &amp;#34;L&amp;#34;: 50, &amp;#34;C&amp;#34;: 100, &amp;#34;D&amp;#34;: 500, &amp;#34;M&amp;#34;: 1000, &amp;#34;IV&amp;#34;: 4, &amp;#34;IX&amp;#34;: 9, &amp;#34;XL&amp;#34;: 40, &amp;#34;XC&amp;#34;: 90, &amp;#34;CD&amp;#34;: 400, &amp;#34;CM&amp;#34;: 900, } sList := strings.Split(s, &amp;#34;&amp;#34;) result := 0 for i:=0;i&amp;lt;len(sList);i++ { if i == len(sList) -1 { result = result + tranMap[sList[i]] continue } if v, ok := tranMap[sList[i]+sList[i+1]];ok{ result = result + v i = i + 1 continue } result = result + tranMap[sList[i]] } return result }</description></item><item><title>数学 mathematics</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/mathematics/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/mathematics/</guid><description>数学 mathematics # 整数反转 ... func reverse(x int) int { y := 0 for x != 0 { y = y*10 + x%10 x = x/10 } if y &amp;lt; -(1&amp;lt;&amp;lt;31) || y &amp;gt; (1&amp;lt;&amp;lt;31)-1 { return 0 } return y }</description></item><item><title>数组 array</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/array/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/array/</guid><description>数组 array # 两数之和 ... func twoSum(nums []int, target int) []int { result := map[int]int{} for i:=0;i&amp;lt;len(nums);i++{ if k, exist := result[target-nums[i]];exist { fmt.Println(k, i) return []int{k, i} } result[nums[i]] = i } return nil } 合并两个有序数组 ... 合并有序数列，不一定从小到大合并，也可以从大到小合并； 第一个数组有空间余量，直接操作比创建新变量空间合适； func merge(nums1 []int, m int, nums2 []int, n int) { p1 := m-1 p2 := n-1 p3 := m+n-1 for ;p1&amp;gt;=0&amp;amp;&amp;amp;p2&amp;gt;=0;p3--{ if nums1[p1] &amp;lt; nums2[p2] { nums1[p3] = nums2[p2] p2 = p2-1 continue } nums1[p3] = nums1[p1] p1 = p1-1 } for i:=0;i&amp;lt;p2+1;i++{ nums1[i] = nums2[i] } } 两数之和 II - 输入有序数组 .</description></item><item><title>链表 linked list</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/example/linkedlist/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/example/linkedlist/</guid><description>链表 linked list # 合并两个有序列表 ... /** * Definition for singly-linked list. * type ListNode struct { * Val int * Next *ListNode * } */ func mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode { result := &amp;amp;ListNode{} preHead := result for (l1 != nil &amp;amp;&amp;amp; l2 != nil){ if l1.Val &amp;lt; l2.Val { preHead.Next = l1 l1 = l1.Next } else { preHead.Next = l2 l2 = l2.Next } preHead = preHead.</description></item><item><title>面向对象设计原则</title><link>https://yuyongid.github.io/myWiki/docs/go-language/dev-rule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/go-language/dev-rule/</guid><description>面向对象设计原则 # 依赖倒置原则（DIP）
高层模块（稳定）不应该依赖底层模块（变化），二者都应该依赖抽象（稳定） 抽象（稳定）不应该依赖实现细节（变化），实现细节应该依赖于抽象（稳定） 开放封闭原则（OCP）
对扩展开放，对更改封闭 类模块应该可以扩展的，但是不可以修改的 单一职责原则（LSP）
一个类应该仅有一个引起他变化的原因 变化的方向隐含这类的责任 Liskov替换原则（LSP）
子类必须能够替换他们的基类（IS-A） 继承表达类型抽象 接口隔离原则（ISP）
不应该强迫客户程序依赖他们不使用的方法 接口应该小而完备 优先使用对象组合，而不是类继承
类继承通常为“白箱复用”，对象组合通常为“黑箱复用” 继承在某种程度上破坏了封装性，子类父类耦合度高。 而对象组合则是要求被组合的对象有良好定义的接口，耦合度低。 封装变化点
使用封装来创建对象之间的分界层。类设计者可以在分界的一侧进行修改，而不会对另外一侧产生不良的影响。从而实现层次间的松耦合。 针对接口编程，而不是针对实现编程
不将变量的类型声明为某个特定的具体类，而声明为某接口； 客户程序无需获知对象的具体类型，只需要知道对象所具有的接口； 减少系统中各部分的依赖关系，从而实现“高内聚，低耦合”</description></item><item><title>高频题目</title><link>https://yuyongid.github.io/myWiki/docs/arithmetic/leetcoderanking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://yuyongid.github.io/myWiki/docs/arithmetic/leetcoderanking/</guid><description>LeetCode 的高频题目 # DFS：深度优先搜索算法（Depth First Search），对于二叉树而言，它沿着树的深度遍历树的节点，尽可能深的搜索树的分支，这一过程一直进行到已发现从源节点可达的所有节点为止。
平衡二叉树： 左右子树的高度相差不超过 1 的树为平衡二叉树
插入方式 描述 旋转方式 LL 在 A 的左子树根节点的左子树上插入节点而破坏平衡 右旋转 RR 在 A 的右子树根节点的右子树上插入节点而破坏平衡 左旋转 LR 在A的左子树根节点的右子树上插入节点而破坏平衡 先左旋后右旋 RL 在 A 的右子树根节点的左子树上插入节点而破坏平衡 先右旋后左旋 位运算 bit operation # IP 到 CIDR 只出现一次的数字 字符串 string # 罗马数字转整数 数学 mathematics # 整数反转 数组 arrary # 两数之和 合并两个有序数组 两数之和 II - 输入有序数组 链表 linked list # 合并两个有序链表 反转链表 二叉树 binary tree # 反转二叉树 二叉树的最大深度 合并二叉树 二叉树层次遍历2 将有序数组转化为高度平衡二叉搜索树 对称二叉树 哈希表 hash map # 宝石与石头 岛屿的周长 两个数组的交集</description></item></channel></rss>